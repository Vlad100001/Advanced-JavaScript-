// Урок 1. Коллекции и итераторы. Модули
// Формат сдачи: ссылка на репозиторий.


// Задание 1
// • Используя Symbol.iterator, создайте объект "Музыкальная коллекция", который можно итерировать. Каждая итерация должна возвращать следующий альбом из коллекции.

// • Создайте объект musicCollection, который содержит массив альбомов и имеет свойство-символ Symbol.iterator. Каждый альбом имеет следующую структуру:

const musicCollection = [
    { title: 'Perfetto', artist: 'Eros Ramazzotti', year: '2015' },
    { title: 'Tina!', artist: 'Tina Terner', year: '2008' },
    { title: 'Per Sempre', artist: 'Adriano Celentano', year: '2002' }
];
musicCollection[Symbol.iterator] = function () {
    return {
        current: 0,
        to: this.length,
        next() {
            return this.current < this.to ? { done: false, value: musicCollection[this.current++] } : { done: true };

        }

    }
}
for (let music of musicCollection) {
    console.log(`Название ${music.title}, Исполнитель ${music.artist}, Год выпуска ${music.year}`);

}
// {
// title: "Название альбома",
// artist: "Исполнитель",
// year: "Год выпуска"
// }

// • Реализуйте кастомный итератор для объекта musicCollection. Итератор должен перебирать альбомы по порядку.
// • Используйте цикл for...of для перебора альбомов в музыкальной коллекции и вывода их на консоль в формате: Название альбома - Исполнитель (Год выпуска)


// Задание 2
// Вы управляете рестораном, в котором работают разные повара, специализирующиеся на определенных блюдах.Клиенты приходят и делают заказы на разные блюда.

// Необходимо создать систему управления этими заказами, которая позволит:

// • Отслеживать, какой повар готовит какое блюдо.
// • Записывать, какие блюда заказал каждый клиент.

// Используйте коллекции Map для хранения блюд и их поваров, а также для хранения заказов каждого клиента.В качестве ключей для клиентов используйте объекты.

// Повара и их специализации:

// Виктор - специализация: Пицца.
//     Ольга - специализация: Суши.
//         Дмитрий - специализация: Десерты.

// Блюда и их повара:

// Пицца "Маргарита" - повар: Виктор.
//     Пицца "Пепперони" - повар: Виктор.
//         Суши "Филадельфия" - повар: Ольга.
//             Суши "Калифорния" - повар: Ольга.
//                 Тирамису - повар: Дмитрий.
//                     Чизкейк - повар: Дмитрий.

//                         Заказы:

// Клиент Алексей заказал: Пиццу "Пепперони" и Тирамису.
// Клиент Мария заказала: Суши "Калифорния" и Пиццу "Маргарита".
// Клиент Ирина заказала: Чизкейк.

const dishesAndCooks = new Map;
dishesAndCooks.set('Пицца "Маргарита"', 'повар: Виктор')
    .set('Пицца "Пепперони"', 'повар: Виктор')
    .set('Суши "Филадельфия"', 'повар: Ольга')
    .set('Суши "Калифорния"', 'повар: Ольга')
    .set('Десерт "Тирамису"', 'повар: Дмитрий')
    .set('Десерт "Чизкейк"', 'повар: Дмитрий');



const order1 = new Set()
    .add("Пиццу 'Пепперони'")
    .add('Десерт "Чизкейк"',);
const order2 = new Set()
    .add("Пиццу 'Пепперони'")
    .add('Суши "Калифорния"')
const order3 = new Set()
    .add('Десерт "Чизкейк"');

const cooks = new Map();
cooks.set('Алексей', order1);
cooks.set('Ирина', order3);
cooks.set('Мария', order2);


console.log(`Заказ готовят: ${dishesAndCooks.get(order1)} `);
console.log(`Клиент Заказал: ${cooks.keys('Алексей')} `); 